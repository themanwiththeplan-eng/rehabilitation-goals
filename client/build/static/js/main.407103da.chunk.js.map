{"version":3,"sources":["components/GoalList/index.js","utils/mutations.js","utils/queries.js","components/GoalForm/index.js","pages/Home.js","utils/auth.js","pages/loginForm.js","pages/Signup.js","pages/findGoal.js","components/Header/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["GoalList","goals","title","map","goal","className","username","style","fontSize","createdAt","goalText","_id","LOGIN_USER","gql","ADD_USER","ADD_GOAL","QUERY_GOAL","QUERY_ME","GoalForm","useState","formState","setFormState","characterCount","setCharacterCount","useMutation","addGoal","error","handleFormSubmit","event","preventDefault","console","log","variables","data","window","location","assign","handleChange","target","name","value","length","class","color","onSubmit","placeholder","goalString","lineHeight","onChange","type","Home","useQuery","loading","me","border","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","removeItem","Login","props","email","password","login","handleSubmit","Auth","Container","maxWidth","id","Box","mb","TextField","variant","label","fullWidth","autoComplete","Button","Signup","addUser","SingleGoal","goalId","useParams","user","fontStyle","text","Header","to","loggedIn","href","onClick","logout","Footer","useLocation","navigate","useNavigate","pathname","role","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.407103da.chunk.js","sourcesContent":["import React from 'react'\n// Import `<Link>` component from React Router for internal hyperlinks\nimport { Link } from 'react-router-dom'\n\nconst GoalList = ({ goals, title }) => {\n  if (!goals) {\n    return <h3>No Thoughts Yet</h3>\n  }\n\n  return (\n    <div>\n      <h3>{title}</h3>\n      {goals &&\n        goals.map((goal) => (\n          <div key={goal._id} className=\"card mb-3\">\n            <h4 className=\"card-header bg-primary text-light p-2 m-0\">\n              {goal.username} <br />\n              <span style={{ fontSize: '1rem' }}>\n                had this goal on {goal.createdAt}\n              </span>\n            </h4>\n            <div className=\"card-body bg-light p-2\">\n              <p>{goal.goalText}</p>\n            </div>\n            {/* Create a link to this thought's page to view its comments using `<Link>` component */}\n            {/* <Link\n              className=\"btn btn-primary btn-block btn-squared\"\n              to={`/goals/${goal._id}`}\n            >\n              Join the discussion on this thought.\n            </Link> */}\n          </div>\n        ))}\n    </div>\n  )\n}\n\nexport default GoalList\n","import { gql } from '@apollo/client'\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`\nexport const ADD_GOAL = gql`\n  mutation addGoal($goalText: String!, $username: String!) {\n    addGoal(goalText: $goalText, username: $username) {\n      _id\n      goalText\n      createdAt\n      username\n    }\n  }\n`\n","import { gql } from '@apollo/client'\n\nexport const QUERY_GOALS = gql`\n  query goals($username: String) {\n    goals(username: $username) {\n      _id\n      goalText\n      createdAt\n      username\n    }\n  }\n`\n\nexport const QUERY_GOAL = gql`\n  query goal($id: ID!) {\n    goal(_id: $id) {\n      _id\n      goalText\n      createdAt\n      username\n    }\n  }\n`\nexport const QUERY_USER = gql`\n  query user($username: String!) {\n    user(username: $username) {\n      _id\n      username\n      email\n      goals {\n        _id\n        goalText\n        createdAt\n      }\n    }\n  }\n`\nexport const QUERY_ME = gql`\n  query me {\n    me {\n      _id\n      username\n      email\n\n      goals {\n        _id\n        goalText\n        createdAt\n      }\n    }\n  }\n`\n\nexport const QUERY_ME_BASIC = gql`\n  query basic {\n    me {\n      _id\n      username\n      email\n    }\n  }\n`\n","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { ADD_GOAL } from '../../utils/mutations'\nimport { QUERY_GOALS } from '../../utils/queries'\n\nconst GoalForm = () => {\n  const [formState, setFormState] = useState({\n    goalText: '',\n    username: '',\n  })\n  const [characterCount, setCharacterCount] = useState(0)\n  const [addGoal, { error }] = useMutation(ADD_GOAL)\n\n  // const [addGoal, { error }] = useMutation(ADD_GOAL, {\n  //   update(cache, { data: { addGoal } }) {\n  //     try {\n  //       const { goals } = cache.readQuery({ query: QUERY_GOALS })\n\n  //       cache.writeQuery({\n  //         query: QUERY_GOALS,\n  //         data: { goals: [addGoal, ...goals] },\n  //       })\n  //     } catch (e) {\n  //       console.error(e)\n  //     }\n  //   },\n  // })\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault()\n    console.log(formState)\n\n    try {\n      const { data } = await addGoal({\n        variables: {\n          goalText: formState.goalText,\n          username: formState.username,\n        },\n      })\n\n      setFormState({\n        goalText: '',\n        username: '',\n      })\n\n      window.location.assign('/profile')\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  const handleChange = (event) => {\n    const { name, value } = event.target\n\n    if (name === 'goalText' && value.length <= 280) {\n      setFormState({ ...formState, [name]: value })\n      setCharacterCount(value.length)\n    } else if (name !== 'goalText') {\n      setFormState({ ...formState, [name]: value })\n    }\n  }\n\n  return (\n    <div>\n      <h3 class=\"Goalquestion\">What's on your techy mind?</h3>\n\n      <p\n        className={`m-0 ${\n          characterCount === 280 || error ? 'text-danger' : ''\n        }`}\n        style={{ color: 'grey' }}\n      >\n        Character Count: {characterCount}/280\n        {error && <span className=\"ml-2\">Something went wrong...</span>}\n      </p>\n      <form\n        className=\"flex-row justify-center justify-space-between-md align-center\"\n        onSubmit={handleFormSubmit}\n      >\n        <div className=\"col-12\">\n          <textarea\n            name=\"goalText\"\n            placeholder=\"Here's a new goal...\"\n            value={formState.goalString}\n            className=\"form-input w-100\"\n            style={{ lineHeight: '1.5' }}\n            onChange={handleChange}\n          ></textarea>\n        </div>\n        <div className=\"col-12 col-lg-9\">\n          <input\n            name=\"username\"\n            placeholder=\"Add your name to get credit for the goal...\"\n            value={formState.username}\n            className=\"form-input w-100\"\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"col-12 col-lg-3\">\n          <button className=\"btn btn-primary btn-block py-3\" type=\"submit\">\n            Add Goal\n          </button>\n        </div>\n        {error && (\n          <div className=\"col-12 my-3 bg-danger text-white p-3\">\n            Something went wrong...\n          </div>\n        )}\n      </form>\n    </div>\n  )\n}\n\nexport default GoalForm\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\n\nimport GoalList from '../components/GoalList'\nimport GoalForm from '../components/GoalForm'\n\nimport { QUERY_ME } from '../utils/queries'\n\nconst Home = () => {\n  const { loading, data } = useQuery(QUERY_ME)\n  console.log(data)\n\n  const goals = data?.me?.goals || []\n\n  return (\n    <main>\n      <div className=\"flex-row justify-center\">\n        <div\n          className=\"col-12 col-md-10 mb-3 p-3\"\n          style={{ border: '1px dotted #1a1a1a' }}\n        >\n          <GoalForm />\n        </div>\n        <div className=\"col-12 col-md-8 mb-3\">\n          {loading ? <div>Loading...</div> : <GoalList goals={goals} />}\n        </div>\n      </div>\n    </main>\n  )\n}\n\nexport default Home\n","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode'\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken())\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken()\n    return !!token && !this.isTokenExpired(token) // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token)\n      if (decoded.exp < Date.now() / 1000) {\n        return true\n      } else return false\n    } catch (err) {\n      return false\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token')\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken)\n    window.location.assign('/')\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token')\n    // this will reload the page and reset the state of the application\n    window.location.assign('/')\n  }\n}\n\nexport default new AuthService()\n","// import '../index.css';\n\nimport React, { useState } from 'react'\n// import { useMutation } from '@apollo/react-hooks'\nimport { useMutation } from '@apollo/client'\n\nimport { LOGIN_USER } from '../utils/mutations'\nimport Auth from '../utils/auth'\n\nimport TextField from '@material-ui/core/TextField'\nimport Container from '@material-ui/core/Container'\nimport Button from '@material-ui/core/Button'\nimport Box from '@material-ui/core/Box'\n// import { useForm } from 'react-hook-form'\n\nconst Login = (props) => {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n\n  const [login, { error }] = useMutation(LOGIN_USER)\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    })\n  }\n\n  // submit form\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n\n    try {\n      const { data } = await login({\n        variables: { ...formState },\n      })\n      console.log(data)\n      Auth.login(data.login.token)\n    } catch (e) {\n      console.error(e)\n    }\n\n    // clear form values\n    setFormState({\n      email: '',\n      password: '',\n    })\n  }\n\n  return (\n    <Container maxWidth=\"xs\">\n      <h2 id=\"login-h2\">Login</h2>\n      <form onSubmit={handleSubmit}>\n        <Box mb={2}>\n          <TextField\n            name=\"email\"\n            onChange={handleChange}\n            variant=\"outlined\"\n            label=\"email\"\n            fullWidth\n            autoComplete=\"email\"\n            value={formState.email}\n          />\n\n          {/* {...register(\"email\", {required: \"Required\" })} */}\n        </Box>\n        <Box mb={2}>\n          <TextField\n            name=\"password\"\n            onChange={handleChange}\n            type=\"password\"\n            variant=\"outlined\"\n            label=\"password\"\n            fullWidth\n            value={formState.password}\n          />\n          {/* {...register(\"password\", {required: \"Required\" })} */}\n        </Box>\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\n          Login\n        </Button>\n      </form>\n    </Container>\n  )\n}\n\nexport default Login\n","import React, { useState } from 'react'\n// import { useMutation } from '@apollo/react-hooks'\nimport { useMutation } from '@apollo/client'\n\nimport { ADD_USER } from '../utils/mutations'\nimport Auth from '../utils/auth'\n\nconst Signup = () => {\n  const [formState, setFormState] = useState({\n    username: '',\n    email: '',\n    password: '',\n  })\n\n  const [addUser, { error }] = useMutation(ADD_USER)\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    })\n  }\n\n  // submit form using async\n  const handleFormSubmit = async (event) => {\n    event.preventDefault()\n\n    // use try/catch instead of promises to handle errors\n    try {\n      // execute addUser mutation and pass in variable data from form\n      const { data } = await addUser({\n        variables: { ...formState },\n      })\n      Auth.login(data.addUser.token)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-md-6\">\n        <div className=\"card\">\n          <h4 className=\"card-header\">Register</h4>\n          <div className=\"card-body\">\n            <form onSubmit={handleFormSubmit}>\n              <input\n                className=\"form-input\"\n                placeholder=\"Enter your username\"\n                name=\"username\"\n                type=\"username\"\n                id=\"username\"\n                value={formState.username}\n                onChange={handleChange}\n              />\n              <input\n                className=\"form-input\"\n                placeholder=\"Enter your email\"\n                name=\"email\"\n                type=\"email\"\n                id=\"email\"\n                value={formState.email}\n                onChange={handleChange}\n              />\n              <input\n                className=\"form-input\"\n                placeholder=\"******\"\n                name=\"password\"\n                type=\"password\"\n                id=\"password\"\n                value={formState.password}\n                onChange={handleChange}\n              />\n              <button className=\"btn d-block w-100\" type=\"submit\">\n                Submit\n              </button>\n            </form>\n            {error && <div>Sign up failed...</div>}\n          </div>\n        </div>\n      </div>\n    </main>\n  )\n}\n\nexport default Signup\n","import React from 'react'\n\n// Import the `useParams()` hook from React Router\nimport { useParams } from 'react-router-dom'\nimport { useQuery } from '@apollo/client'\n\nimport { QUERY_GOAL } from '../utils/queries'\n\nconst SingleGoal = () => {\n  // Use `useParams()` to retrieve value of the route parameter `:profileId`\n  const { goalId } = useParams()\n\n  const { loading, data } = useQuery(QUERY_GOAL, {\n    // Pass the `thoughtId` URL parameter into query to retrieve this thought's data\n    variables: { goalId: goalId },\n  })\n\n  const goal = data?.goal || {}\n\n  if (loading) {\n    return <div>Loading...</div>\n  }\n  return (\n    <div className=\"my-3\">\n      <h3 className=\"card-header bg-dark text-light p-2 m-0\">\n        {goal.user} <br />\n        <span style={{ fontSize: '1rem' }}>\n          had this thought on {goal.createdAt}\n        </span>\n      </h3>\n      <div className=\"bg-light py-4\">\n        <blockquote\n          className=\"p-4\"\n          style={{\n            fontSize: '1.5rem',\n            fontStyle: 'italic',\n            border: '2px dotted #1a1a1a',\n            lineHeight: '1.5',\n          }}\n        >\n          {goal.text}\n        </blockquote>\n      </div>\n    </div>\n  )\n}\n\nexport default SingleGoal\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Auth from '../../utils/auth'\n\nconst Header = () => {\n  const logout = (event) => {\n    event.preventDefault()\n    Auth.logout()\n  }\n\n  return (\n    <header className=\"bg-secondary mb-4 py-2 flex-row align-center\">\n      <div className=\"container flex-row justify-space-between-lg justify-center align-center\">\n        <Link to=\"/\">\n          <h1>Rehabilitation Goals</h1>\n        </Link>\n        <p className=\"m-0\">\n          <em>Let's help people get better!</em>\n        </p>\n        <nav className=\"text-center\">\n          {Auth.loggedIn() ? (\n            <>\n              <Link to=\"/profile\">Me</Link>\n              <a href=\"/\" onClick={logout}>\n                Logout\n              </a>\n            </>\n          ) : (\n            <>\n              <Link to=\"/login\">\n                <strong>Login</strong>\n              </Link>\n              <Link to=\"/signup\">\n                <strong>Register</strong>\n              </Link>\n            </>\n          )}\n        </nav>\n      </div>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\n\nconst Footer = () => {\n  const location = useLocation()\n  const navigate = useNavigate()\n  return (\n    <footer className=\"w-100 mt-auto bg-secondary \">\n      <div className=\"container text-center mb-4\">\n        {location.pathname !== '/' && (\n          <button className=\" btn-dark mb-auto\" onClick={() => navigate(-1)}>\n            &larr; Go Back\n          </button>\n        )}\n        <h6>\n          Made with{' '}\n          <span\n            className=\"emoji\"\n            role=\"img\"\n            aria-label=\"heart\"\n            aria-hidden=\"false\"\n          >\n            ❤️\n          </span>{' '}\n          by the Rehab Goals Team.\n        </h6>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react'\n// import ApolloClient from 'apollo-boost'\n// import { ApolloProvider } from '@apollo/react-hooks'\nimport { setContext } from '@apollo/client/link/context'\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client'\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\n\nimport Home from './pages/Home'\nimport LoginPage from './pages/loginForm'\nimport Signup from './pages/Signup'\nimport FindGoal from './pages/findGoal'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\n\n// const client = new ApolloClient({\n//   request: (operation) => {\n//     const token = localStorage.getItem('id_token')\n\n//     operation.setContext({\n//       headers: {\n//         authorization: token ? `Bearer ${token}` : '',\n//       },\n//     })\n//   },\n//   uri: '/graphql',\n// })\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token')\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  }\n})\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-flex-start min-100-vh\">\n          <Header />\n          <div className=\"container\">\n            <Routes>\n              <Route path=\"/\" element={<Home />} />\n              <Route path=\"/login\" element={<LoginPage />} />\n              <Route path=\"/signup\" element={<Signup />} />\n\n              {/* Create a route to display a single thought's comments based on its `thoughtId` provided in the URL */}\n              <Route path=\"/goals/:goalId\" element={<FindGoal />} />\n            </Routes>\n          </div>\n          <Footer />\n        </div>\n      </Router>\n    </ApolloProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n// import reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\nserviceWorker.register()\n"],"sourceRoot":""}